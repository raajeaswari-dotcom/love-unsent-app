import React, { useState, useMemo } from 'react';
import { GoogleGenAI } from '@google/genai';
// FIX: Corrected import path for App.tsx
import { OrderDetails, Product, User, Transaction, PaymentMethod, TaxSettings, Shipment, Coupon, StoreSettings, Writer } from '../../../App';
import { DashboardIcon, OrdersIcon, ProductsIcon, CustomersIcon, PencilIcon, TrashIcon, EyeIcon, SparklesIcon, CloseIcon, SortIcon, ArrowDownIcon, SearchIcon, SettingsIcon, PlusIcon, ShippingIcon, MarketingIcon, ReportsIcon, PrintIcon, WritersIcon } from './Icons';

interface AdminDashboardProps {
    orders: OrderDetails[];
    setOrders: React.Dispatch<React.SetStateAction<OrderDetails[]>>;
    products: Product[];
    setProducts: React.Dispatch<React.SetStateAction<Product[]>>;
    customers: User[];
    setCustomers: React.Dispatch<React.SetStateAction<User[]>>;
    transactions: Transaction[];
    setTransactions: React.Dispatch<React.SetStateAction<Transaction[]>>;
    paymentMethods: PaymentMethod[];
    setPaymentMethods: React.Dispatch<React.SetStateAction<PaymentMethod[]>>;
    taxSettings: TaxSettings;
    setTaxSettings: React.Dispatch<React.SetStateAction<TaxSettings>>;
    shipments: Shipment[];
    setShipments: React.Dispatch<React.SetStateAction<Shipment[]>>;
    coupons: Coupon[];
    setCoupons: React.Dispatch<React.SetStateAction<Coupon[]>>;
    storeSettings: StoreSettings;
    setStoreSettings: React.Dispatch<React.SetStateAction<StoreSettings>>;
    writers: Writer[];
    setWriters: React.Dispatch<React.SetStateAction<Writer[]>>;
}

const StatCard: React.FC<{ title: string; value: string; }> = ({ title, value }) => (
    <div className="bg-white p-6 rounded-xl shadow">
        <h3 className="text-sm font-semibold text-[#511317] uppercase tracking-wider">{title}</h3>
        <p className="text-3xl font-bold mt-1 text-[#2C1B13]">{value}</p>
    </div>
);

const SalesChart: React.FC<{ orders: OrderDetails[] }> = ({ orders }) => {
    const salesByDay = useMemo(() => {
        if (!orders || orders.length === 0) return [];
        const dailyTotals: { [key: string]: number } = {};
        orders.forEach(order => {
            const date = new Date(order.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            if (!dailyTotals[date]) { dailyTotals[date] = 0; }
            dailyTotals[date] += order.total;
        });
        return Object.entries(dailyTotals).map(([date, total]) => ({ date, total })).slice(-7).reverse();
    }, [orders]);

    if (salesByDay.length === 0) { return (<div className="h-80 bg-gray-100 rounded-lg flex items-center justify-center"><p className="text-gray-500">No sales data available.</p></div>); }

    const maxSale = Math.max(...salesByDay.map(d => d.total), 0);
    const chartHeight = 320;
    const barWidth = 40;
    const gapWidth = 20;

    return (
        <div className="w-full overflow-x-auto"><svg width={salesByDay.length * (barWidth + gapWidth)} height={chartHeight} className="font-sans"><g>{salesByDay.map((day, index) => { const barHeight = maxSale > 0 ? (day.total / maxSale) * (chartHeight - 40) : 0; const x = index * (barWidth + gapWidth); const y = chartHeight - barHeight - 20; return (<g key={day.date}><rect x={x} y={y} width={barWidth} height={barHeight} fill="#511317" rx="4" ry="4" /><text x={x + barWidth / 2} y={chartHeight - 5} textAnchor="middle" fontSize="12" fill="#2C1B13">{day.date}</text><text x={x + barWidth / 2} y={y - 5} textAnchor="middle" fontSize="12" fill="#511317" fontWeight="bold">â‚¹{day.total.toFixed(0)}</text></g>); })}</g></svg></div>
    );
};


const AdminDashboard: React.FC<AdminDashboardProps> = ({ orders, setOrders, products, setProducts, customers, setCustomers, transactions, setTransactions, paymentMethods, setPaymentMethods, taxSettings, setTaxSettings, shipments, setShipments, coupons, setCoupons, storeSettings, setStoreSettings, writers, setWriters }) => {
    const [activeTab, setActiveTab] = useState('dashboard');
    
    // Modals
    const [editingProduct, setEditingProduct] = useState<Product | null>(null);
    const [selectedOrder, setSelectedOrder] = useState<OrderDetails | null>(null);
    const [selectedCustomer, setSelectedCustomer] = useState<User | null>(null);
    const [editingCustomer, setEditingCustomer] = useState<User | null>(null);
    const [editingPaymentMethod, setEditingPaymentMethod] = useState<PaymentMethod | null>(null);
    const [editingShipment, setEditingShipment] = useState<Shipment | null>(null);
    const [editingCoupon, setEditingCoupon] = useState<Coupon | null>(null);
    const [editingWriter, setEditingWriter] = useState<Writer | null>(null);
    const [isModalOpen, setIsModalOpen] = useState<{ [key: string]: boolean }>({});
    const [invoiceOrder, setInvoiceOrder] = useState<OrderDetails | null>(null);


    const openModal = (modalName: string, data?: any) => {
        if (data) {
            if (modalName === 'product') setEditingProduct(data);
            if (modalName === 'order') setSelectedOrder(data);
            if (modalName === 'customerDetails') setSelectedCustomer(data);
            if (modalName === 'customerEdit') setEditingCustomer(data);
            if (modalName === 'paymentMethod') setEditingPaymentMethod(data);
            if (modalName === 'shipment') setEditingShipment(data);
            if (modalName === 'coupon') setEditingCoupon(data);
            if (modalName === 'writer') setEditingWriter(data);
            if (modalName === 'invoice') setInvoiceOrder(data);
        }
        setIsModalOpen(prev => ({ ...prev, [modalName]: true }));
    };

    const closeModal = (modalName: string) => {
        setIsModalOpen(prev => ({ ...prev, [modalName]: false }));
        setEditingProduct(null); setSelectedOrder(null); setSelectedCustomer(null);
        setEditingCustomer(null); setEditingPaymentMethod(null); setEditingShipment(null);
        setEditingCoupon(null); setEditingWriter(null); setInvoiceOrder(null);
    };

    const [orderSearchTerm, setOrderSearchTerm] = useState('');
    const [orderStatusFilter, setOrderStatusFilter] = useState<OrderDetails['status'] | 'All'>('All');
    const [orderSortConfig, setOrderSortConfig] = useState<{ key: keyof OrderDetails | null; direction: string }>({ key: 'date', direction: 'descending' });
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [customerSortConfig, setCustomerSortConfig] = useState<{ key: keyof User | 'city' | null; direction: string }>({ key: 'joinedDate', direction: 'descending' });
    const [shipmentSearchTerm, setShipmentSearchTerm] = useState('');
    const [shipmentStatusFilter, setShipmentStatusFilter] = useState<Shipment['status'] | 'All'>('All');
    const [shipmentSortConfig, setShipmentSortConfig] = useState<{ key: keyof Shipment | null; direction: string }>({ key: 'shippingDate', direction: 'descending' });


    const filteredAndSortedOrders = useMemo(() => { let sorted = [...orders]; if (orderStatusFilter !== 'All') { sorted = sorted.filter(o => o.status === orderStatusFilter); } if (orderSearchTerm) { sorted = sorted.filter(o => o.orderNumber.toLowerCase().includes(orderSearchTerm.toLowerCase()) || o.customerName.toLowerCase().includes(orderSearchTerm.toLowerCase())); } if (orderSortConfig.key) { const key = orderSortConfig.key; sorted.sort((a, b) => { const aVal = a[key], bVal = b[key]; if (aVal < bVal) return orderSortConfig.direction === 'ascending' ? -1 : 1; if (aVal > bVal) return orderSortConfig.direction === 'ascending' ? 1 : -1; return 0; }); } return sorted; }, [orders, orderSearchTerm, orderStatusFilter, orderSortConfig]);
    const filteredAndSortedCustomers = useMemo(() => { let sorted = [...customers]; if (customerSearchTerm) { sorted = sorted.filter(c => c.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) || c.email.toLowerCase().includes(customerSearchTerm.toLowerCase())); } if (customerSortConfig.key) { const key = customerSortConfig.key; sorted.sort((a, b) => { let aVal: any, bVal: any; if (key === 'city') { aVal = a.address.city; bVal = b.address.city; } else { aVal = a[key as keyof User]; bVal = b[key as keyof User]; } if (aVal < bVal) return customerSortConfig.direction === 'ascending' ? -1 : 1; if (aVal > bVal) return customerSortConfig.direction === 'ascending' ? 1 : -1; return 0; }); } return sorted; }, [customers, customerSearchTerm, customerSortConfig]);
    const filteredAndSortedShipments = useMemo(() => { let sorted = [...shipments]; if (shipmentStatusFilter !== 'All') { sorted = sorted.filter(s => s.status === shipmentStatusFilter); } if (shipmentSearchTerm) { sorted = sorted.filter(s => s.orderNumber.toLowerCase().includes(shipmentSearchTerm.toLowerCase()) || s.customerName.toLowerCase().includes(shipmentSearchTerm.toLowerCase()) || s.trackingNumber.toLowerCase().includes(shipmentSearchTerm.toLowerCase())); } if (shipmentSortConfig.key) { const key = shipmentSortConfig.key; sorted.sort((a, b) => { const aVal = a[key], bVal = b[key]; if (aVal === null) return 1; if (bVal === null) return -1; if (aVal < bVal) return shipmentSortConfig.direction === 'ascending' ? -1 : 1; if (aVal > bVal) return shipmentSortConfig.direction === 'ascending' ? 1 : -1; return 0; }); } return sorted; }, [shipments, shipmentSearchTerm, shipmentStatusFilter, shipmentSortConfig]);


    const requestSort = (key: any, config: any, setConfig: any) => { setConfig((prev: any) => ({ key, direction: prev.key === key && prev.direction === 'ascending' ? 'descending' : 'ascending' })); };
    const handleDelete = (id: number, items: any[], setItems: (items: any[]) => void, itemName: string) => { if (window.confirm(`Are you sure you want to delete this ${itemName}?`)) { setItems(items.filter(item => item.id !== id)); } };
    
    const handleSaveProduct = (data: Product) => { if (data.id) { setProducts(products.map(p => p.id === data.id ? data : p)); } else { setProducts([...products, { ...data, id: Date.now() }]); } closeModal('product'); };
    const handleOrderStatusChange = (orderNumber: string, newStatus: OrderDetails['status']) => { setOrders(orders.map(o => o.orderNumber === orderNumber ? { ...o, status: newStatus } : o)); if (newStatus === 'Shipped' && !shipments.some(s => s.orderNumber === orderNumber)) { const order = orders.find(o => o.orderNumber === orderNumber); if (order) { setShipments(prev => [{ shipmentId: `SH-${Date.now().toString().slice(-6)}`, orderNumber: order.orderNumber, customerName: order.customerName, shippingDate: null, carrier: '', trackingNumber: '', status: 'Pending' }, ...prev]); } } };
    const handleSaveCustomer = (data: User) => { if (data.id) { setCustomers(customers.map(c => c.id === data.id ? data : c)); } else { setCustomers([...customers, { ...data, id: Date.now() }]); } closeModal('customerEdit'); };
    const handleSaveShipment = (data: Shipment) => { setShipments(shipments.map(s => s.shipmentId === data.shipmentId ? data : s)); closeModal('shipment'); };
    const handleShipmentStatusChange = (shipmentId: string, newStatus: Shipment['status']) => { setShipments(shipments.map(s => s.shipmentId === shipmentId ? { ...s, status: newStatus } : s)); };
    const handleSavePaymentMethod = (data: PaymentMethod) => { if (data.id) { setPaymentMethods(paymentMethods.map(pm => pm.id === data.id ? { ...pm, name: data.name } : pm)); } else { setPaymentMethods([...paymentMethods, { ...data, id: Date.now(), enabled: true }]); } closeModal('paymentMethod'); };
    const handleSaveCoupon = (data: Coupon) => { if (data.id) { setCoupons(coupons.map(c => c.id === data.id ? data : c)); } else { setCoupons([...coupons, { ...data, id: Date.now() }]); } closeModal('coupon'); };
    const handleSaveWriter = (data: Writer) => { if (data.id) { setWriters(writers.map(w => w.id === data.id ? data : w)); } else { setWriters([...writers, { ...data, id: Date.now() }]); } closeModal('writer'); };
    // FIX: Corrected a typo where 'writer' was used instead of 'writerId'. This resolves the 'Cannot find name' error.
    const handleAssignWriter = (orderNumber: string, writerId: number) => { setOrders(orders.map(o => o.orderNumber === orderNumber ? { ...o, writerId: writerId } : o)); };


    const SortableHeader: React.FC<{ label: string; sortKey: any; config: any; setConfig: any; className?: string }> = ({ label, sortKey, config, setConfig, className = '' }) => (<th className={`p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase tracking-wider cursor-pointer select-none ${className}`} onClick={() => requestSort(sortKey, config, setConfig)}><div className="flex items-center gap-1.5">{label}{config.key === sortKey ? (<ArrowDownIcon className={`w-4 h-4 transition-transform ${config.direction === 'ascending' ? 'transform rotate-180' : ''}`} />) : (<SortIcon className="w-4 h-4 text-gray-400" />)}</div></th>);
    const orderStatusColors: { [key in OrderDetails['status']]: string } = { Processing: 'bg-yellow-100 text-yellow-800', Writing: 'bg-indigo-100 text-indigo-800', Packaged: 'bg-purple-100 text-purple-800', Shipped: 'bg-blue-100 text-blue-800', Delivered: 'bg-green-100 text-green-800', Cancelled: 'bg-red-100 text-red-800' };
    const shipmentStatusColors: { [key in Shipment['status']]: string } = { Pending: 'bg-gray-100 text-gray-800', Shipped: 'bg-blue-100 text-blue-800', 'In Transit': 'bg-indigo-100 text-indigo-800', 'Out for Delivery': 'bg-purple-100 text-purple-800', Delivered: 'bg-green-100 text-green-800', 'Failed Attempt': 'bg-red-100 text-red-800' };
    const summaryStats = useMemo(() => { const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0); return { totalRevenue: `â‚¹${totalRevenue.toFixed(2)}`, totalOrders: orders.length.toString(), avgOrderValue: `â‚¹${(orders.length > 0 ? totalRevenue / orders.length : 0).toFixed(2)}`, conversionRate: "2.5%" }; }, [orders]);
    const topSellingProducts = useMemo(() => { const sales: { [key: string]: number } = {}; orders.forEach(order => { order.items.forEach(item => { if (!sales[item.productName]) sales[item.productName] = 0; sales[item.productName]++; }); }); return Object.entries(sales).sort((a, b) => b[1] - a[1]).slice(0, 5); }, [orders]);
    const recentActivities = useMemo(() => { const combined = [...orders.map(o => ({ type: 'order', data: o, date: new Date(o.date) })), ...customers.map(c => ({ type: 'customer', data: c, date: new Date(c.joinedDate) }))]; return combined.sort((a, b) => b.date.getTime() - a.date.getTime()).slice(0, 5); }, [orders, customers]);

    const renderContent = () => {
        switch (activeTab) {
            case 'dashboard': return (
                <div className="space-y-8">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"><StatCard title="Total Revenue" value={summaryStats.totalRevenue} /><StatCard title="Total Orders" value={summaryStats.totalOrders} /><StatCard title="Avg. Order Value" value={summaryStats.avgOrderValue} /><StatCard title="Conversion Rate" value={summaryStats.conversionRate} /></div>
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"><div className="lg:col-span-2 bg-white p-8 rounded-2xl shadow"><h2 className="text-2xl font-bold mb-6 text-[#2C1B13]">Recent Sales</h2><SalesChart orders={orders} /></div><div className="space-y-6"><div className="bg-white p-6 rounded-xl shadow"><h3 className="text-lg font-bold mb-4 text-[#2C1B13]">Top Selling Products</h3><ul className="space-y-2">{topSellingProducts.map(([name, count]) => (<li key={name} className="flex justify-between text-sm text-[#2C1B13]"><span>{name}</span><span className="font-bold">{count} sales</span></li>))}</ul></div><div className="bg-white p-6 rounded-xl shadow"><h3 className="text-lg font-bold mb-4 text-[#2C1B13]">Recent Activity</h3><ul className="space-y-3">{recentActivities.map((act, i) => (<li key={i} className="text-sm text-[#2C1B13]">{act.type === 'order' ? `New order #${(act.data as OrderDetails).orderNumber} from ${(act.data as OrderDetails).customerName}` : `New customer: ${(act.data as User).name}`}</li>))}</ul></div></div></div>
                </div>);
            case 'orders': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4"><h2 className="text-2xl font-bold text-[#2C1B13]">Manage Orders</h2><div className="relative w-full md:w-auto"><input type="text" placeholder="Search..." value={orderSearchTerm} onChange={(e) => setOrderSearchTerm(e.target.value)} className="w-full md:w-64 bg-gray-100 rounded-full py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-[#511317]" /><div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><SearchIcon className="w-5 h-5 text-gray-400" /></div></div></div><div className="flex gap-2 mb-4 flex-wrap">{(['All', 'Processing', 'Writing', 'Packaged', 'Shipped', 'Delivered', 'Cancelled'] as const).map(s => (<button key={s} onClick={() => setOrderStatusFilter(s)} className={`px-4 py-1.5 text-sm font-semibold rounded-full ${orderStatusFilter === s ? 'bg-[#511317] text-white' : 'bg-gray-200 text-[#2C1B13]'}`}>{s}</button>))}</div><div className="overflow-x-auto"><table className="w-full"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><SortableHeader label="Order ID" sortKey="orderNumber" config={orderSortConfig} setConfig={setOrderSortConfig} /><SortableHeader label="Date" sortKey="date" config={orderSortConfig} setConfig={setOrderSortConfig} /><SortableHeader label="Customer" sortKey="customerName" config={orderSortConfig} setConfig={setOrderSortConfig} /><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Writer</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Status</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody className="text-[#2C1B13]">{filteredAndSortedOrders.map(o => (<tr key={o.orderNumber} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 font-mono text-sm">{o.orderNumber}</td><td className="p-4">{new Date(o.date).toLocaleDateString()}</td><td className="p-4">{o.customerName}</td><td className="p-4">{writers.find(w => w.id === o.writerId)?.name || 'Unassigned'}</td><td className="p-4"><select value={o.status} onChange={(e) => handleOrderStatusChange(o.orderNumber, e.target.value as OrderDetails['status'])} className={`px-2 py-1 text-xs font-semibold rounded-full border-none focus:ring-2 focus:ring-[#511317] ${orderStatusColors[o.status]}`}><option value="Processing">Processing</option><option value="Writing">Writing</option><option value="Packaged">Packaged</option><option value="Shipped">Shipped</option><option value="Delivered">Delivered</option><option value="Cancelled">Cancelled</option></select></td><td className="p-4 flex gap-3"><button onClick={() => openModal('order', o)} className="text-gray-600 hover:text-[#511317]"><EyeIcon /></button><button onClick={() => openModal('invoice', o)} className="text-gray-600 hover:text-blue-600"><PrintIcon className="w-5 h-5"/></button></td></tr>))}</tbody></table></div></div>);
            case 'products': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-[#2C1B13]">Manage Products</h2><button onClick={() => openModal('product')} className="bg-[#511317] text-white font-bold py-2 px-4 rounded-lg hover:bg-opacity-90">Add New Product</button></div><div className="overflow-x-auto"><table className="w-full text-[#2C1B13]"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Product</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Price</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Stock</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">GST</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody>{products.map(p => (<tr key={p.id} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 flex items-center gap-4"><img src={p.imageUrl} alt={p.name} className="w-12 h-12 object-cover rounded-md" /><span className="font-semibold">{p.name}</span></td><td className="p-4 font-bold">â‚¹{p.price.toFixed(2)}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${p.stock > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{p.stock > 0 ? `${p.stock} in stock` : 'Out of stock'}</span></td><td className="p-4">{p.gstRate || 0}%</td><td className="p-4"><div className="flex gap-4"><button onClick={() => openModal('product', p)} className="text-blue-600"><PencilIcon /></button><button onClick={() => handleDelete(p.id, products, setProducts, 'product')} className="text-red-600"><TrashIcon /></button></div></td></tr>))}</tbody></table></div></div>);
            case 'customers': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-[#2C1B13]">Customers</h2><div className="flex items-center gap-4"><div className="relative"><input type="text" placeholder="Search..." value={customerSearchTerm} onChange={(e) => setCustomerSearchTerm(e.target.value)} className="w-64 bg-gray-100 rounded-full py-2 pl-10 pr-4 focus:ring-2 focus:ring-[#511317]" /><div className="absolute inset-y-0 left-0 pl-3 flex items-center"><SearchIcon className="w-5 h-5 text-gray-400" /></div></div><button onClick={() => openModal('customerEdit')} className="bg-[#511317] text-white font-bold py-2 px-4 rounded-lg">Add Customer</button></div></div><div className="overflow-x-auto"><table className="w-full text-[#2C1B13]"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><SortableHeader label="Name" sortKey="name" config={customerSortConfig} setConfig={setCustomerSortConfig} /><SortableHeader label="Email" sortKey="email" config={customerSortConfig} setConfig={setCustomerSortConfig} /><SortableHeader label="City" sortKey="city" config={customerSortConfig} setConfig={setCustomerSortConfig} /><SortableHeader label="Joined" sortKey="joinedDate" config={customerSortConfig} setConfig={setCustomerSortConfig} /><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody>{filteredAndSortedCustomers.map(c => (<tr key={c.id} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 font-semibold">{c.name}</td><td className="p-4">{c.email}</td><td className="p-4">{c.address.city}</td><td className="p-4">{c.joinedDate}</td><td className="p-4"><div className="flex gap-4"><button onClick={() => openModal('customerDetails', c)}><EyeIcon /></button><button onClick={() => openModal('customerEdit', c)} className="text-blue-600"><PencilIcon /></button><button onClick={() => handleDelete(c.id, customers, setCustomers, 'customer')} className="text-red-600"><TrashIcon /></button></div></td></tr>))}</tbody></table></div></div>);
            case 'writers': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-[#2C1B13]">Writers</h2><button onClick={() => openModal('writer')} className="bg-[#511317] text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2"><PlusIcon /> Add Writer</button></div><div className="overflow-x-auto"><table className="w-full text-[#2C1B13]"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Name</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Specialty</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Assigned Orders</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Status</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody>{writers.map(w => (<tr key={w.id} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 font-semibold">{w.name}</td><td className="p-4">{w.specialty}</td><td className="p-4">{w.assignedOrders}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${w.status === 'Available' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>{w.status}</span></td><td className="p-4"><div className="flex gap-4"><button onClick={() => openModal('writer', w)} className="text-blue-600"><PencilIcon /></button><button onClick={() => handleDelete(w.id, writers, setWriters, 'writer')} className="text-red-600"><TrashIcon /></button></div></td></tr>))}</tbody></table></div></div>);
            case 'marketing': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-[#2C1B13]">Discount Coupons</h2><button onClick={() => openModal('coupon')} className="bg-[#511317] text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2"><PlusIcon /> New Coupon</button></div><div className="overflow-x-auto"><table className="w-full text-[#2C1B13]"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Code</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Type</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Value</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Status</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody>{coupons.map(c => (<tr key={c.id} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 font-mono font-bold">{c.code}</td><td className="p-4 capitalize">{c.type}</td><td className="p-4">{c.type === 'percentage' ? `${c.value}%` : `â‚¹${c.value.toFixed(2)}`}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${c.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-200 text-gray-700'}`}>{c.isActive ? 'Active' : 'Inactive'}</span></td><td className="p-4"><div className="flex gap-4"><button onClick={() => openModal('coupon', c)} className="text-blue-600"><PencilIcon /></button><button onClick={() => handleDelete(c.id, coupons, setCoupons, 'coupon')} className="text-red-600"><TrashIcon /></button></div></td></tr>))}</tbody></table></div></div>);
            case 'shipping': return (<div className="bg-white p-8 rounded-2xl shadow"><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-[#2C1B13]">Shipping Management</h2><div className="relative"><input type="text" placeholder="Search..." value={shipmentSearchTerm} onChange={(e) => setShipmentSearchTerm(e.target.value)} className="w-64 bg-gray-100 rounded-full py-2 pl-10 pr-4 focus:ring-2 focus:ring-[#511317]" /><div className="absolute inset-y-0 left-0 pl-3 flex items-center"><SearchIcon className="w-5 h-5 text-gray-400" /></div></div></div><div className="flex gap-2 mb-4 flex-wrap">{(['All', 'Pending', 'Shipped', 'In Transit', 'Out for Delivery', 'Delivered', 'Failed Attempt'] as const).map(s => (<button key={s} onClick={() => setShipmentStatusFilter(s)} className={`px-4 py-1.5 text-sm font-semibold rounded-full ${shipmentStatusFilter === s ? 'bg-[#511317] text-white' : 'bg-gray-200 text-[#2C1B13]'}`}>{s}</button>))}</div><div className="overflow-x-auto"><table className="w-full text-[#2C1B13]"><thead className="bg-gray-50"><tr className="border-b-2 border-gray-200"><SortableHeader label="Order ID" sortKey="orderNumber" config={shipmentSortConfig} setConfig={setShipmentSortConfig} /><SortableHeader label="Customer" sortKey="customerName" config={shipmentSortConfig} setConfig={setShipmentSortConfig} /><SortableHeader label="Carrier" sortKey="carrier" config={shipmentSortConfig} setConfig={setShipmentSortConfig} /><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Tracking #</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Status</th><th className="p-4 text-left text-xs font-semibold text-[#2C1B13] uppercase">Actions</th></tr></thead><tbody>{filteredAndSortedShipments.map(s => (<tr key={s.shipmentId} className="border-b border-gray-200 hover:bg-gray-50"><td className="p-4 font-mono text-sm">{s.orderNumber}</td><td className="p-4">{s.customerName}</td><td className="p-4">{s.carrier || 'N/A'}</td><td className="p-4 font-mono text-sm">{s.trackingNumber || 'N/A'}</td><td className="p-4"><select value={s.status} onChange={(e) => handleShipmentStatusChange(s.shipmentId, e.target.value as Shipment['status'])} className={`px-2 py-1 text-xs font-semibold rounded-full border-none focus:ring-2 focus:ring-[#511317] ${shipmentStatusColors[s.status]}`}><option value="Pending">Pending</option><option value="Shipped">Shipped</option><option value="In Transit">In Transit</option><option value="Out for Delivery">Out for Delivery</option><option value="Delivered">Delivered</option><option value="Failed Attempt">Failed Attempt</option></select></td><td className="p-4"><button onClick={() => openModal('shipment', s)} className="text-blue-600"><PencilIcon /></button></td></tr>))}</tbody></table></div></div>);
            case 'reports': return (<div className="bg-white p-8 rounded-2xl shadow"><h2 className="text-2xl font-bold text-[#2C1B13]">Reports</h2><p className="mt-4 text-gray-700">Advanced reporting and analytics module coming soon!</p></div>);
            case 'settings': return (<SettingsPage storeSettings={storeSettings} setStoreSettings={setStoreSettings} paymentMethods={paymentMethods} setPaymentMethods={setPaymentMethods} openModal={openModal} />);
            default: return null;
        }
    };
    
    const NavItem: React.FC<{ tabName: string; icon: React.ReactNode; label: string }> = ({ tabName, icon, label }) => (<button onClick={() => setActiveTab(tabName)} className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-sm font-semibold ${activeTab === tabName ? 'bg-white text-[#2C1B13] shadow' : 'text-[#2C1B13] hover:bg-white/50'}`}>{icon}{label}</button>);

    return (
        <div className="bg-[#DBCDBE] text-[#2C1B13] min-h-screen">
            <div className="container mx-auto px-6 py-12">
                <h1 className="font-display text-4xl md:text-5xl font-black mb-8 text-[#2C1B13]">Admin Dashboard</h1>
                <div className="flex flex-col md:flex-row gap-8 items-start">
                    <aside className="w-full md:w-64 bg-[#F3E9DD] p-4 rounded-xl shadow shrink-0">
                        <nav className="space-y-2">
                            <NavItem tabName="dashboard" icon={<DashboardIcon className="w-5 h-5"/>} label="Dashboard" />
                            <NavItem tabName="orders" icon={<OrdersIcon className="w-5 h-5"/>} label="Orders" />
                            <NavItem tabName="products" icon={<ProductsIcon className="w-5 h-5"/>} label="Products" />
                            <NavItem tabName="customers" icon={<CustomersIcon className="w-5 h-5"/>} label="Customers" />
                            <NavItem tabName="writers" icon={<WritersIcon className="w-5 h-5"/>} label="Writers" />
                            <NavItem tabName="marketing" icon={<MarketingIcon className="w-5 h-5"/>} label="Marketing" />
                            <NavItem tabName="shipping" icon={<ShippingIcon className="w-5 h-5"/>} label="Shipping" />
                            <NavItem tabName="reports" icon={<ReportsIcon className="w-5 h-5"/>} label="Reports" />
                            <div className="pt-4 mt-4 border-t border-[#A37B65]/50"><NavItem tabName="settings" icon={<SettingsIcon className="w-5 h-5"/>} label="Settings" /></div>
                        </nav>
                    </aside>
                    <main className="flex-1">{renderContent()}</main>
                </div>
            </div>
            {isModalOpen.product && <ProductModal product={editingProduct} onSave={handleSaveProduct} onClose={() => closeModal('product')} />}
            {isModalOpen.order && selectedOrder && <OrderDetailsModal order={selectedOrder} writers={writers} onAssignWriter={handleAssignWriter} onClose={() => closeModal('order')} />}
            {isModalOpen.customerDetails && selectedCustomer && <CustomerDetailsModal customer={selectedCustomer} onClose={() => closeModal('customerDetails')} />}
            {isModalOpen.customerEdit && <CustomerEditModal customer={editingCustomer} onSave={handleSaveCustomer} onClose={() => closeModal('customerEdit')} />}
            {isModalOpen.paymentMethod && <PaymentMethodModal method={editingPaymentMethod} onSave={handleSavePaymentMethod} onClose={() => closeModal('paymentMethod')} />}
            {isModalOpen.shipment && editingShipment && <ShipmentModal shipment={editingShipment} onSave={handleSaveShipment} onClose={() => closeModal('shipment')} />}
            {isModalOpen.coupon && <CouponModal coupon={editingCoupon} onSave={handleSaveCoupon} onClose={() => closeModal('coupon')} />}
            {isModalOpen.writer && <WriterModal writer={editingWriter} onSave={handleSaveWriter} onClose={() => closeModal('writer')} />}
            {isModalOpen.invoice && invoiceOrder && <InvoiceModal order={invoiceOrder} storeSettings={storeSettings} onClose={() => closeModal('invoice')} />}
        </div>
    );
};

const SettingsPage: React.FC<{ storeSettings: StoreSettings, setStoreSettings: any, paymentMethods: PaymentMethod[], setPaymentMethods: any, openModal: any }> = ({ storeSettings, setStoreSettings, paymentMethods, setPaymentMethods, openModal }) => {
    const handleStoreChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { const { name, value } = e.target; setStoreSettings((prev: any) => ({ ...prev, [name]: value })); };
    const handleShippingChange = (e: React.ChangeEvent<HTMLInputElement>) => { const { name, value } = e.target; setStoreSettings((prev: any) => ({ ...prev, shipping: { ...prev.shipping, [name]: parseFloat(value) || 0 } })); };
    const handleTogglePaymentMethod = (id: number) => { setPaymentMethods((prev: PaymentMethod[]) => prev.map(pm => pm.id === id ? { ...pm, enabled: !pm.enabled } : pm)); };
    const handleDeletePaymentMethod = (id: number) => { if (window.confirm('Are you sure?')) { setPaymentMethods((prev: PaymentMethod[]) => prev.filter(pm => pm.id !== id)); } };
    return (<div className="bg-white p-8 rounded-2xl shadow text-[#2C1B13]"><h2 className="text-2xl font-bold mb-6">Settings</h2><div className="space-y-8"><div className="border rounded-lg p-6"><h3 className="text-lg font-bold mb-4">Store Details</h3><div className="space-y-4"><input type="text" name="storeName" value={storeSettings.storeName} onChange={handleStoreChange} placeholder="Store Name" className="w-full bg-gray-100 rounded-md p-2" /><textarea name="address" value={storeSettings.address} onChange={handleStoreChange} placeholder="Store Address" rows={3} className="w-full bg-gray-100 rounded-md p-2" /><input type="text" name="gstin" value={storeSettings.gstin} onChange={handleStoreChange} placeholder="GSTIN" className="w-full bg-gray-100 rounded-md p-2" /><input type="email" name="contactEmail" value={storeSettings.contactEmail} onChange={handleStoreChange} placeholder="Contact Email" className="w-full bg-gray-100 rounded-md p-2" /></div></div><div className="border rounded-lg p-6"><h3 className="text-lg font-bold mb-4">Shipping Configuration</h3><div className="space-y-4"><div><label className="font-semibold">Flat Rate (â‚¹)</label><input type="number" name="flatRate" value={storeSettings.shipping.flatRate} onChange={handleShippingChange} className="w-full bg-gray-100 rounded-md p-2" /></div><div><label className="font-semibold">Free Shipping Threshold (â‚¹)</label><p className="text-sm text-gray-600">0 for no free shipping</p><input type="number" name="freeShippingThreshold" value={storeSettings.shipping.freeShippingThreshold} onChange={handleShippingChange} className="w-full bg-gray-100 rounded-md p-2" /></div></div></div><div className="border rounded-lg p-6"><div className="flex justify-between items-center mb-4"><h3 className="text-lg font-bold">Payment Methods</h3><button onClick={() => openModal('paymentMethod')} className="bg-[#511317] text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2"><PlusIcon /> Add New</button></div><div className="space-y-3">{paymentMethods.map(method => (<div key={method.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-md"><span className="font-semibold">{method.name}</span><div className="flex items-center gap-4"><label className="flex items-center cursor-pointer"><div className="relative"><input type="checkbox" className="sr-only" checked={method.enabled} onChange={() => handleTogglePaymentMethod(method.id)} /><div className={`block w-12 h-6 rounded-full ${method.enabled ? 'bg-[#511317]' : 'bg-gray-300'}`}></div><div className={`dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform ${method.enabled ? 'translate-x-6' : ''}`}></div></div></label><button onClick={() => openModal('paymentMethod', method)} className="text-blue-600"><PencilIcon className="w-4 h-4" /></button><button onClick={() => handleDeletePaymentMethod(method.id)} className="text-red-600"><TrashIcon className="w-4 h-4" /></button></div></div>))}</div></div></div></div>);
};

const ProductModal: React.FC<{ product: Product | null, onSave: (data: any) => void, onClose: () => void }> = ({ product, onSave, onClose }) => {
    const [formData, setFormData] = useState({ id: product?.id, name: product?.name || '', price: product?.price || 0, description: product?.description || '', imageUrl: product?.imageUrl || '', sku: product?.sku || '', stock: product?.stock || 0, category: product?.category || '', gstRate: product?.gstRate || 0, hsnCode: product?.hsnCode || '' });
    const [isGenerating, setIsGenerating] = useState(false);
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: (name === 'price' || name === 'stock' || name === 'gstRate') ? parseFloat(value) : value })); };
    const handleGenerateDescription = async () => { if (!formData.name) return; setIsGenerating(true); try { 
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string }); 
        const prompt = `Write a compelling, SEO-friendly product description for a product named "${formData.name}" in the category "${formData.category}". The product is a heartfelt, handwritten letter service. Keep it concise (2-3 sentences) and evocative.`; 
        const response = await ai.models.generateContent({ model: 'gemini-2.5-flash', contents: prompt }); 
        setFormData(prev => ({ ...prev, description: response.text })); } catch (error) { console.error("AI error:", error); } finally { setIsGenerating(false); } };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); onSave(formData); };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-2xl relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">{product ? 'Edit Product' : 'Add Product'}</h2><form onSubmit={handleSubmit} className="space-y-4 max-h-[80vh] overflow-y-auto pr-2"><div className="grid md:grid-cols-2 gap-4"><input name="name" value={formData.name} onChange={handleChange} placeholder="Product Name" required className="w-full bg-gray-100 rounded-md p-2" /><input name="category" value={formData.category} onChange={handleChange} placeholder="Category" required className="w-full bg-gray-100 rounded-md p-2" /></div><div className="grid md:grid-cols-2 gap-4"><input name="sku" value={formData.sku} onChange={handleChange} placeholder="SKU" className="w-full bg-gray-100 rounded-md p-2" /><div className="flex gap-4"><input type="number" name="price" value={formData.price} onChange={handleChange} placeholder="Price (â‚¹)" required className="w-full bg-gray-100 rounded-md p-2" /><input type="number" name="stock" value={formData.stock} onChange={handleChange} placeholder="Stock" required className="w-full bg-gray-100 rounded-md p-2" /></div></div><div className="grid md:grid-cols-2 gap-4"><input type="number" name="gstRate" value={formData.gstRate} onChange={handleChange} placeholder="GST Rate %" className="w-full bg-gray-100 rounded-md p-2" /><input name="hsnCode" value={formData.hsnCode} onChange={handleChange} placeholder="HSN Code" className="w-full bg-gray-100 rounded-md p-2" /></div><div className="relative"><textarea name="description" value={formData.description} onChange={handleChange} placeholder="Description" rows={4} className="w-full bg-gray-100 rounded-md p-2"></textarea><button type="button" onClick={handleGenerateDescription} disabled={isGenerating} className="absolute bottom-3 right-3 bg-[#A37B65] text-white text-xs font-bold py-1 px-2 rounded-full flex items-center gap-1 disabled:bg-opacity-50">{isGenerating ? '...' : <><SparklesIcon className="w-4 h-4" /> Generate</>}</button></div><input name="imageUrl" value={formData.imageUrl} onChange={handleChange} placeholder="Image URL" required className="w-full bg-gray-100 rounded-md p-2" /><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const OrderDetailsModal: React.FC<{ order: OrderDetails, writers: Writer[], onAssignWriter: (orderNumber: string, writerId: number) => void, onClose: () => void }> = ({ order, writers, onAssignWriter, onClose }) => {
    const [isReviewing, setIsReviewing] = useState(false);
    const [reviewResult, setReviewResult] = useState('');
    const letterMessage = order.items.find(item => item.message)?.message || '';

    const handleAiReview = async () => {
        if (!letterMessage) return;
        setIsReviewing(true);
        setReviewResult('');
        try {
            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
            const prompt = `You are an expert editor for a handwritten letter company called "Copy of Love". Review the following customer's letter for grammar, spelling, and emotional impact. Provide constructive feedback and suggest specific improvements to make it more heartfelt and polished, while preserving the original sentiment.

Original Letter:
"${letterMessage}"`;
            
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: prompt,
            });
            setReviewResult(response.text);
        } catch (error) {
            console.error("AI Review error:", error);
            setReviewResult('Could not get AI feedback at this time.');
        } finally {
            setIsReviewing(false);
        }
    };

    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-4xl relative text-[#2C1B13] max-h-[90vh] flex flex-col"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-2">Order Details</h2><p className="font-mono text-sm text-gray-700 mb-6">#{order.orderNumber}</p><div className="overflow-y-auto pr-4 flex-grow"><div className="grid grid-cols-2 gap-8 mb-6"><div><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">Customer</h3><p>{order.customerName}</p></div><div><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">Shipping Address</h3><p>{order.shippingAddress.fullName}</p><p>{order.shippingAddress.flat}, {order.shippingAddress.street}</p><p>{order.shippingAddress.city}, {order.shippingAddress.state} - {order.shippingAddress.zip}</p></div></div><div><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">Items</h3><div className="border rounded-lg">{order.items.map(item => (<div key={item.id} className="flex justify-between p-3 border-b last:border-b-0"><span className="capitalize">{item.productName.toLowerCase()}</span><span className="font-bold">â‚¹{item.price.toFixed(2)}</span></div>))}</div></div>{letterMessage && (<div className="mt-6"><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">Letter Content</h3><div className="bg-gray-50 p-4 rounded-lg border max-h-48 overflow-y-auto whitespace-pre-wrap">{letterMessage}</div><div className="mt-4"><div className="flex justify-between items-center"><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">AI Review Tool</h3><button onClick={handleAiReview} disabled={isReviewing} className="bg-[#A37B65] text-white text-xs font-bold py-1 px-3 rounded-full flex items-center gap-1.5 disabled:bg-opacity-50"><SparklesIcon className="w-3 h-3" />{isReviewing ? 'Analyzing...' : 'Get Feedback'}</button></div>{reviewResult && <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mt-2 text-sm max-h-48 overflow-y-auto whitespace-pre-wrap">{reviewResult}</div>}</div></div>)}<div className="grid grid-cols-2 gap-8"><div className="mt-6 pt-4 border-t text-right space-y-1"><p>Subtotal: â‚¹{order.subtotal.toFixed(2)}</p>{order.discountAmount && <p className="text-green-600">Discount: -â‚¹{order.discountAmount.toFixed(2)}</p>}<p>Shipping: â‚¹{order.shippingCost.toFixed(2)}</p><p>GST: â‚¹{order.taxAmount.toFixed(2)}</p><p className="text-2xl font-bold">Total: <span className="text-[#511317]">â‚¹{order.total.toFixed(2)}</span></p></div><div className="mt-6 pt-4 border-t"><h3 className="font-bold text-sm uppercase text-gray-700 mb-2">Assign Writer</h3><select value={order.writerId || ''} onChange={(e) => onAssignWriter(order.orderNumber, parseInt(e.target.value))} className="w-full bg-gray-100 rounded-md p-2"><option value="">Unassigned</option>{writers.map(w => (<option key={w.id} value={w.id}>{w.name}</option>))}</select></div></div></div></div></div>);
}
const CustomerDetailsModal: React.FC<{ customer: User, onClose: () => void }> = ({ customer, onClose }) => (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-lg relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-2">{customer.name}</h2><p className="text-sm text-gray-700 mb-6">{customer.email}</p><div className="space-y-4"><div><h3 className="font-bold text-sm uppercase text-gray-700 mb-1">Contact</h3><p>{customer.mobile || 'N/A'}</p></div><div><h3 className="font-bold text-sm uppercase text-gray-700 mb-1">Address</h3><p>{customer.address.flat}, {customer.address.street}</p><p>{customer.address.city}, {customer.address.state} - {customer.address.zip}</p></div>{customer.notes && <div><h3 className="font-bold text-sm uppercase text-gray-700 mb-1">Notes</h3><p className="text-sm">{customer.notes}</p></div>}<div><h3 className="font-bold text-sm uppercase text-gray-700 mb-1">Joined</h3><p>{customer.joinedDate}</p></div></div></div></div>);
const CustomerEditModal: React.FC<{ customer: User | null, onSave: (data: any) => void, onClose: () => void }> = ({ customer, onSave, onClose }) => {
    const [formData, setFormData] = useState({ id: customer?.id, name: customer?.name || '', email: customer?.email || '', mobile: customer?.mobile || '', flat: customer?.address?.flat || '', street: customer?.address?.street || '', city: customer?.address?.city || '', state: customer?.address?.state || '', zip: customer?.address?.zip || '', notes: customer?.notes || '', isAdmin: customer?.isAdmin || false, joinedDate: customer?.joinedDate || new Date().toLocaleDateString() });
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); const { name, email, mobile, flat, street, city, state, zip, notes, isAdmin, joinedDate } = formData; onSave({ id: customer?.id, name, email, mobile, address: { flat, street, city, state, zip }, notes, isAdmin, joinedDate }); };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-2xl relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">{customer ? 'Edit Customer' : 'Add Customer'}</h2><form onSubmit={handleSubmit} className="space-y-4 max-h-[80vh] overflow-y-auto pr-2"><div className="grid md:grid-cols-2 gap-4"><input name="name" value={formData.name} onChange={handleChange} placeholder="Full Name" required className="w-full bg-gray-100 rounded-md p-2" /><input type="email" name="email" value={formData.email} onChange={handleChange} placeholder="Email" required className="w-full bg-gray-100 rounded-md p-2" /></div><input name="mobile" value={formData.mobile} onChange={handleChange} placeholder="Mobile" className="w-full bg-gray-100 rounded-md p-2" /><h3 className="font-semibold pt-2">Address</h3><div className="grid md:grid-cols-2 gap-4"><input name="flat" value={formData.flat} onChange={handleChange} placeholder="Flat/Door No." className="w-full bg-gray-100 rounded-md p-2" /><input name="street" value={formData.street} onChange={handleChange} placeholder="Street/Area" className="w-full bg-gray-100 rounded-md p-2" /></div><div className="grid md:grid-cols-3 gap-4"><input name="city" value={formData.city} onChange={handleChange} placeholder="City" className="w-full bg-gray-100 rounded-md p-2" /><input name="state" value={formData.state} onChange={handleChange} placeholder="State" className="w-full bg-gray-100 rounded-md p-2" /><input name="zip" value={formData.zip} onChange={handleChange} placeholder="PIN Code" className="w-full bg-gray-100 rounded-md p-2" /></div><textarea name="notes" value={formData.notes} onChange={handleChange} placeholder="Notes" rows={3} className="w-full bg-gray-100 rounded-md p-2"></textarea><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const PaymentMethodModal: React.FC<{ method: PaymentMethod | null, onSave: (data: any) => void, onClose: () => void }> = ({ method, onSave, onClose }) => {
    const [name, setName] = useState(method?.name || '');
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); if (name.trim()) { onSave({ id: method?.id, name }); } };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-md relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">{method ? 'Edit' : 'Add'} Payment Method</h2><form onSubmit={handleSubmit} className="space-y-4"><input value={name} onChange={(e) => setName(e.target.value)} placeholder="Method name" required className="w-full bg-gray-100 rounded-md p-2" /><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const ShipmentModal: React.FC<{ shipment: Shipment, onSave: (data: Shipment) => void, onClose: () => void }> = ({ shipment, onSave, onClose }) => {
    const [formData, setFormData] = useState<Shipment>(shipment);
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); const updated = { ...formData }; if (formData.carrier && formData.trackingNumber && !formData.shippingDate) { updated.shippingDate = new Date().toISOString(); } if (formData.status === 'Pending' && formData.trackingNumber) { updated.status = 'Shipped'; } onSave(updated); };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-lg relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">Edit Shipment #{shipment.orderNumber}</h2><form onSubmit={handleSubmit} className="space-y-4"><select name="carrier" value={formData.carrier} onChange={handleChange} className="w-full bg-gray-100 rounded-md p-2"><option value="">Select Carrier</option><option value="Delhivery">Delhivery</option><option value="Blue Dart">Blue Dart</option><option value="Xpressbees">Xpressbees</option><option value="DTDC">DTDC</option><option value="Other">Other</option></select><input name="trackingNumber" value={formData.trackingNumber} onChange={handleChange} placeholder="Tracking Number" className="w-full bg-gray-100 rounded-md p-2" /><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const CouponModal: React.FC<{ coupon: Coupon | null, onSave: (data: any) => void, onClose: () => void }> = ({ coupon, onSave, onClose }) => {
    const [formData, setFormData] = useState({ id: coupon?.id, code: coupon?.code || '', type: coupon?.type || 'percentage', value: coupon?.value || 0, isActive: coupon?.isActive ?? true });
    
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
      const target = e.target as HTMLInputElement;
      const { name } = target;
      const value = target.type === 'checkbox' ? target.checked : target.value;
      setFormData(prev => ({ ...prev, [name]: value }));
    };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); onSave({ ...formData, value: parseFloat(formData.value as any) }); };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-lg relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">{coupon ? 'Edit' : 'Add'} Coupon</h2><form onSubmit={handleSubmit} className="space-y-4"><input name="code" value={formData.code} onChange={handleChange} placeholder="Coupon Code" required className="w-full bg-gray-100 rounded-md p-2" /><div className="flex gap-4"><select name="type" value={formData.type} onChange={handleChange} className="w-full bg-gray-100 rounded-md p-2"><option value="percentage">Percentage</option><option value="fixed">Fixed Amount</option></select><input type="number" name="value" value={formData.value} onChange={handleChange} placeholder="Value" required className="w-full bg-gray-100 rounded-md p-2" /></div><label className="flex items-center gap-2"><input type="checkbox" name="isActive" checked={formData.isActive} onChange={handleChange} className="h-4 w-4" /> Active</label><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const WriterModal: React.FC<{ writer: Writer | null, onSave: (data: any) => void, onClose: () => void }> = ({ writer, onSave, onClose }) => {
    const [formData, setFormData] = useState({ id: writer?.id, name: writer?.name || '', specialty: writer?.specialty || 'Cursive', status: writer?.status || 'Available', assignedOrders: writer?.assignedOrders || 0 });
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); onSave(formData); };
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl p-8 w-full max-w-lg relative text-[#2C1B13]"><button onClick={onClose} className="absolute top-4 right-4 text-[#2C1B13]"><CloseIcon /></button><h2 className="text-2xl font-bold mb-6">{writer ? 'Edit' : 'Add'} Writer</h2><form onSubmit={handleSubmit} className="space-y-4"><input name="name" value={formData.name} onChange={handleChange} placeholder="Writer Name" required className="w-full bg-gray-100 rounded-md p-2" /><div className="grid grid-cols-2 gap-4"><select name="specialty" value={formData.specialty} onChange={handleChange} className="w-full bg-gray-100 rounded-md p-2"><option>Cursive</option><option>Calligraphy</option><option>Minimalist</option></select><select name="status" value={formData.status} onChange={handleChange} className="w-full bg-gray-100 rounded-md p-2"><option>Available</option><option>Busy</option><option>On Vacation</option></select></div><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="bg-gray-200 font-bold py-2 px-6 rounded-full text-[#2C1B13]">Cancel</button><button type="submit" className="bg-[#511317] text-white font-bold py-2 px-6 rounded-full">Save</button></div></form></div></div>);
};
const InvoiceModal: React.FC<{ order: OrderDetails, storeSettings: StoreSettings, onClose: () => void }> = ({ order, storeSettings, onClose }) => {
    return (<div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-3xl relative"><div id="invoice-content" className="p-10 text-[#2C1B13]"><div className="flex justify-between items-start mb-8"><div > <h1 className="text-3xl font-bold">{storeSettings.storeName}</h1><p className="text-sm">{storeSettings.address}</p><p className="text-sm">GSTIN: {storeSettings.gstin}</p></div><div className="text-right"><h2 className="text-2xl font-bold uppercase">Tax Invoice</h2><p className="text-sm"><strong>Order #:</strong> {order.orderNumber}</p><p className="text-sm"><strong>Date:</strong> {new Date(order.date).toLocaleDateString()}</p></div></div><div className="border-t border-b py-4 mb-8"><div > <h3 className="font-bold mb-1">Bill To:</h3><p>{order.shippingAddress.fullName}</p><p>{order.shippingAddress.flat}, {order.shippingAddress.street}</p><p>{order.shippingAddress.city}, {order.shippingAddress.state} - {order.shippingAddress.zip}</p></div></div><table className="w-full text-left mb-8"><thead><tr className="bg-gray-100"><th className="p-2 font-semibold">Item</th><th className="p-2 text-right font-semibold">Price</th><th className="p-2 text-right font-semibold">GST</th><th className="p-2 text-right font-semibold">Total</th></tr></thead><tbody>{order.items.map(item => { const gstAmount = item.price * ((item.gstRate || 0) / 100); return (<tr key={item.id} className="border-b"><td className="p-2">{item.productName}</td><td className="p-2 text-right">â‚¹{item.price.toFixed(2)}</td><td className="p-2 text-right">â‚¹{gstAmount.toFixed(2)} ({item.gstRate}%)</td><td className="p-2 text-right">â‚¹{(item.price + gstAmount).toFixed(2)}</td></tr>); })}</tbody></table><div className="flex justify-end"><div className="w-full max-w-xs space-y-2"><div className="flex justify-between"><span className="font-semibold">Subtotal:</span><span>â‚¹{order.subtotal.toFixed(2)}</span></div>{order.discountAmount && <div className="flex justify-between"><span className="font-semibold">Discount:</span><span>- â‚¹{order.discountAmount.toFixed(2)}</span></div>}<div className="flex justify-between"><span className="font-semibold">Shipping:</span><span>â‚¹{order.shippingCost.toFixed(2)}</span></div><div className="flex justify-between"><span className="font-semibold">Total GST:</span><span>â‚¹{order.taxAmount.toFixed(2)}</span></div><div className="flex justify-between text-xl font-bold pt-2 border-t mt-2"><span >Total:</span><span>â‚¹{order.total.toFixed(2)}</span></div></div></div></div><div className="p-4 bg-gray-50 flex justify-end gap-4"><button onClick={onClose} className="bg-gray-300 font-bold py-2 px-4 rounded text-[#2C1B13]">Close</button><button onClick={() => window.print()} className="bg-blue-600 text-white font-bold py-2 px-4 rounded">Print</button></div></div></div>)
};


export default AdminDashboard;